{"version":3,"sources":["ClearButton.js","SearchBox.js","CryptoCard.js","Results.js","App.js","reportWebVitals.js","index.js"],"names":["ClearButton","props","clearSearch","Button","variant","onClick","SearchBox","setInput","searchCrypto","id","TextField","label","type","value","input","onChange","e","target","required","CryptoCard","dollarFormat","Intl","NumberFormat","style","currency","minimumFractionDigits","Card","sx","backgroundColor","color","width","textAlign","CardContent","Typography","symbol","price","format","Results","crypto","Row","index","key","item","height","defaultHeight","defaultWidth","itemSize","itemCount","length","App","useState","setCrypto","getCrypto","a","fetch","response","json","data","map","el","console","error","useEffect","searchFilter","filter","includes","match","window","alert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.722fd188.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Button } from '@mui/material'\r\n\r\nconst ClearButton = (props) => {\r\n\r\n    let clearSearch = props.clearSearch;\r\n\r\n    return (\r\n        <div>\r\n            <Button variant=\"contained\" onClick={() => {clearSearch()}}>Clear</Button> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ClearButton\r\n","import React from 'react'\r\nimport { TextField, Button } from '@mui/material';\r\nimport './SearchBox.css';\r\nimport ClearButton from './ClearButton';\r\n\r\nconst SearchBox = (props) => {\r\n\r\n    let setInput = props.setInput;\r\n    let searchCrypto = props.searchCrypto;\r\n    let clearSearch = props.clearSearch;\r\n\r\n    return (\r\n        \r\n        <div id=\"searchContainer\">\r\n\r\n        <div>\r\n         <TextField label=\"Enter Crypto\" type=\"text\" value={props.input} onChange={(e) => {setInput(e.target.value)}} required />  \r\n        </div>\r\n\r\n\r\n        <div>\r\n            <Button variant=\"contained\" onClick={() => {searchCrypto()}}>Search</Button>\r\n        </div>\r\n\r\n        <div>\r\n            <ClearButton clearSearch={clearSearch} />\r\n        </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox\r\n","import React from 'react'\r\nimport { Card } from '@mui/material'\r\nimport { Typography } from '@mui/material';\r\nimport { CardContent } from '@mui/material';\r\n\r\n\r\nconst CryptoCard = (props) => {\r\n\r\n    const dollarFormat = new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n    minimumFractionDigits: 2\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <Card variant=\"outlined\" sx={{ backgroundColor: '#1565c0', color: '#FFFFFF', width: '100vw', textAlign: 'center' }}><CardContent><Typography variant=\"h5\">{props.symbol}</Typography>\r\n            <Typography variant=\"subtitle2\">{props.price}</Typography>\r\n            <Typography variant=\"h6\">{dollarFormat.format(props.price)}USD</Typography>\r\n            </CardContent></Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CryptoCard\r\n","import React from \"react\";\r\nimport CryptoCard from \"./CryptoCard\";\r\nimport { FixedSizeList } from \"react-window\";\r\nimport \"./Results.css\";\r\nimport AutoSizer from \"react-virtualized-auto-sizer\";\r\n\r\n\r\n\r\n\r\nconst Results = (props) => {\r\n\r\n//Setting the crypto data prop to a variable for readability\r\n\r\n  let crypto = props.crypto;\r\n\r\n  //Implementation of React-Virtualized\r\n  //The row function acts similiarly to a map method to take each object in the array and output it in the windowed-list.\r\n\r\n  const Row = ({ style, index, key }) => {\r\n    let item = crypto[index];\r\n    return (\r\n      <div style={style}>\r\n        <CryptoCard key={key} symbol={item.symbol} price={item.price} />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n\r\n    //Implementation of React-window and React-virtualized's Autosizer and Fixedsizelist components to have the large dataset virtualized\r\n    \r\n// After doing some testing and reading online I found with utilizing Autosizer as a standalone package you have to specify the default height and width or it outputs the height and width as 0 automatically\r\n\r\n    <div id=\"cryptoContainer\">\r\n\r\n      <div style={{ width: '100vw', height: '100vh' }}>\r\n\r\n        <AutoSizer\r\n        defaultHeight={1}\r\n        defaultWidth={1}\r\n        >\r\n          {({ height, width }) => (\r\n              <FixedSizeList\r\n                width={width}\r\n                height={height}\r\n                itemSize={150}\r\n                itemCount={crypto.length}\r\n              >\r\n                {Row}\r\n              </FixedSizeList>\r\n            )}\r\n        </AutoSizer>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Results;\r\n","import \"./App.css\";\nimport SearchBox from \"./SearchBox\";\nimport { useState, useEffect } from \"react\";\nimport Results from \"./Results\";\n\n\nfunction App() {\n  //Initializing a input state to track user inputs\n\n  const [input, setInput] = useState(\"\");\n\n  //Initiliazing a crypto state to hold all of the crypto data that is fetched from Binance's API below\n\n  const [crypto, setCrypto] = useState([]);\n\n  //Fetching the JSON object array from Binance and setting the crypto state as the fetched data using async await\n\n  const getCrypto = async () => {\n    try {\n      const response = await fetch(\n        \"https://api.binance.com/api/v3/ticker/price\"\n      );\n      const data = await response.json();\n      data.map((el) => (el.key = el.symbol));\n      setCrypto(data);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n\n  //A filter for the crypto array, which filters based on if the user's imput matches any of the crypto names and also validates the user's input\n\n  const searchCrypto = () => {\n    let searchFilter = crypto.filter((el) => el.symbol.includes(input));\n\n    let regex =\n      /[0-9]|`|~|!|@|#|$|%|^|&|\\*|\\(|\\)|\\+|=|\\[|\\{|\\]|\\}|\\||\\\\|'|<|,|\\.|>|\\?|\\/|\"\"|;|:|\\s/;\n\n    let match = input.match(regex);\n\n    if (input === \"\") {\n      window.alert(\"Please enter the name of a cryptocurrency\");\n    } \n    else if (match.length > 1) {\n      window.alert(\"Please only enter regular characters for your search!\");\n      setInput('')\n    }\n    else {\n      setCrypto(searchFilter);\n    }\n  };\n\n  //Clears the search input and triggers the getCrypto function to return the data to its original state\n\n  const clearSearch = () => {\n    setInput(\"\");\n    getCrypto();\n  };\n\n  //A useEffect to have the getCrypto function run on first render\n\n  useEffect(() => {\n    getCrypto();\n  }, []);\n\n  return (\n    <div>\n      <div id=\"header\">\n\n        <SearchBox\n          input={input}\n          clearSearch={clearSearch}\n          setInput={setInput}\n          searchCrypto={searchCrypto}\n        />\n      </div>\n\n      <div id=\"container\">\n        <Results crypto={crypto} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}